// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.Hand = (function(_super) {
  __extends(Hand, _super);

  function Hand() {
    this.stand = __bind(this.stand, this);
    return Hand.__super__.constructor.apply(this, arguments);
  }

  Hand.prototype.model = Card;

  Hand.prototype.initialize = function(array, deck, isDealer) {
    this.deck = deck;
    this.isDealer = isDealer;
  };

  Hand.prototype.hit = function() {
    this.add(this.deck.pop()).last();
    if (this.scores()[0] > 21) {
      this.trigger('bust', this);
    }
    return this.play();
  };

  Hand.prototype.stand = function() {
    return this.trigger('stand');
  };

  Hand.prototype.play = function() {
    if (this.isDealer && this.scores()[0] <= 21) {
      if (this.scores()[0] < 17) {
        return this.hit();
      } else {
        return this.stand();
      }
    }
  };

  Hand.prototype.blackJack = function() {
    if (this.scores[0]() === 21) {
      return this.trigger('blackjack', this);
    }
  };

  Hand.prototype.scores = function() {
    var hasAce, score;
    hasAce = this.reduce(function(memo, card) {
      return memo || card.get('value') === 1;
    }, false);
    score = this.reduce(function(score, card) {
      return score + (card.get('revealed') ? card.get('value') : 0);
    }, 0);
    if (hasAce && ((score + 10) <= 21)) {
      return [score + 10];
    } else {
      return [score];
    }
  };


  /*
  scores: ->
     * The scores are an array of potential scores.
     * Usually, that array contains one element. That is the only score.
     * when there is an ace, it offers you two scores - the original score, and score + 10.
    hasAce = @reduce (memo, card) ->
      memo or card.get('value') is 1
    , false
    score = @reduce (score, card) ->
      score + if card.get 'revealed' then card.get 'value' else 0
    , 0
    if hasAce then [score, score + 10] else [score]
   */

  return Hand;

})(Backbone.Collection);
